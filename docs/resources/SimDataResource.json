{
  "$schema": "https://raw.githubusercontent.com/sims4toolkit/misc/main/json-schemas/docs-item-schema.json",
  "imports": [
    "import { SimDataResource } from \"@s4tk/models\"; // ESM",
    "const { SimDataResource } = require(\"@s4tk/models\"); // CJS"
  ],
  "header": {
    "title": {
      "prefix": "class",
      "name": "SimDataResource",
      "extends": [
        {
          "name": "WritableModel",
          "path": {
            "pkg": "models",
            "group": "abstracts",
            "item": "WritableModel"
          }
        }
      ],
      "implements": [
        {
          "name": "Resource",
          "path": {
            "pkg": "models",
            "group": "types",
            "item": "Resource"
          }
        }
      ]
    },
    "description": "Model for SimData resources. While combined tuning is the same format, it is NOT supported by this model at this time.\n\nSimDatas are mini relational databases, and to simplify working with them (and for consistency with its XML format), this model uses the concept of \"instances\". An \"instance\" is an object cell that has a name.",
    "sourceCode": "src/lib/resources/simdata/simdata-resource.ts"
  },
  "sections": [
    {
      "title": "Properties",
      "content": [
        {
          "displayType": "property",
          "prefix": "readonly",
          "name": "encodingType",
          "description": "Always 'EncodingType.DATA'.",
          "type": {
            "name": "EncodingType",
            "path": {
              "pkg": "models",
              "group": "enums",
              "item": "EncodingType"
            }
          },
          "overrides": {
            "name": "Resource",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "Resource"
            }
          }
        },
        {
          "displayType": "property",
          "prefix": "get, set",
          "name": "instance",
          "description": "Alias for 'instances[0]'.",
          "type": {
            "name": "SimDataInstance",
            "path": {
              "pkg": "models",
              "group": "simdata-fragments",
              "item": "SimDataInstance"
            }
          }
        },
        {
          "displayType": "property",
          "prefix": "get",
          "name": "instances",
          "description": "An array that contains the instances for this SimData. Mutating this array and its children is safe in terms of cacheing.",
          "type": {
            "name": "SimDataInstance[]",
            "path": {
              "pkg": "models",
              "group": "simdata-fragments",
              "item": "SimDataInstance"
            }
          }
        },
        {
          "displayType": "property",
          "prefix": "get",
          "name": "props",
          "description": "Alias for 'instances[0].row'",
          "type": {
            "name": "ObjectCellRow",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ObjectCellRow"
            }
          }
        },
        {
          "displayType": "property",
          "prefix": "get, set",
          "name": "schema",
          "description": "Alias for 'schemas[0]'.",
          "type": {
            "name": "SimDataSchema",
            "path": {
              "pkg": "models",
              "group": "simdata-fragments",
              "item": "SimDataSchema"
            }
          }
        },
        {
          "displayType": "property",
          "prefix": "get",
          "name": "schemas",
          "description": "An array that contains the schemas for this SimData. Mutating this array and its children is safe in terms of cacheing.",
          "type": {
            "name": "SimDataSchema[]",
            "path": {
              "pkg": "models",
              "group": "simdata-fragments",
              "item": "SimDataSchema"
            }
          }
        },
        {
          "displayType": "property",
          "prefix": "get, set",
          "name": "unused",
          "description": "A number in the SimData header that is not used, but is usually set to the group number for a pack.",
          "type": {
            "name": "number"
          }
        },
        {
          "displayType": "property",
          "prefix": "get, set",
          "name": "version",
          "description": "The version of this SimData. This can either be 0x100 or 0x101, but should be 0x101.",
          "type": {
            "name": "number"
          }
        }
      ]
    },
    {
      "title": "Initialization",
      "content": [
        {
          "displayType": "function",
          "name": "constructor",
          "returnType": {
            "name": "SimDataResource"
          },
          "description": "Creates a new SimData using the provided options.",
          "arguments": [
            {
              "description": "Optional arguments.",
              "optional": true,
              "name": "options",
              "type": {
                "name": "SimDataResourceCreationOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "SimDataResourceCreationOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const simdata = new SimDataResource({\n  version: 0x101,\n  unused: 0x1A,\n  schemas: [schema],\n  instances: [instance]\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "from",
          "returnType": {
            "name": "SimDataResource"
          },
          "description": "Creates an SimData resource from a buffer containing binary SimData data. This buffer is assumed to be uncompressed; providing a compressed buffer will lead to unexpected behavior.",
          "arguments": [
            {
              "name": "buffer",
              "description": "Uncompressed fuffer to create a SimData resource from.",
              "type": {
                "name": "Buffer"
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Object of optional arguments.",
              "type": {
                "name": "WritableModelFromOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelFromOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const data = SimDataResource.from(buffer);"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "fromAsync",
          "returnType": {
            "name": "Promise<SimDataResource>"
          },
          "description": "Asynchronously creates an SimData resource from a buffer containing binary SimData data. This buffer is assumed to be uncompressed; providing a compressed buffer will lead to unexpected behavior.",
          "arguments": [
            {
              "name": "buffer",
              "description": "Uncompressed fuffer to create a SimData resource from.",
              "type": {
                "name": "Buffer"
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Object of optional arguments.",
              "type": {
                "name": "WritableModelFromOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelFromOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "SimDataResource.fromAsync(buffer).then(data => {\n  // do stuff\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "fromXml",
          "returnType": {
            "name": "SimDataResource"
          },
          "description": "Creates a SimDataResource from S4S-style XML, as a string or Buffer. The data is assumed to be uncompressed; providing a compressed string or buffer will lead to unexpected behavior.",
          "arguments": [
            {
              "name": "xml",
              "description": "XML string or buffer to parse as a SimData.",
              "type": {
                "name": "string | Buffer"
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Object of optional arguments.",
              "type": {
                "name": "WritableModelFromOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelFromOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const data = SimDataResource.fromXml(stringOfSimDataXml);"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "fromXmlAsync",
          "returnType": {
            "name": "Promise<SimDataResource>"
          },
          "description": "Asynchronously creates a SimDataResource from S4S-style XML, as a string or Buffer. The data is assumed to be uncompressed; providing a compressed string or buffer will lead to unexpected behavior.",
          "arguments": [
            {
              "name": "xml",
              "description": "XML string or buffer to parse as a SimData.",
              "type": {
                "name": "string | Buffer"
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Object of optional arguments.",
              "type": {
                "name": "WritableModelFromOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelFromOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "SimDataResource.fromXmlAsync(stringOfSimDataXml).then(data => {\n  // do stuff\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "fromXmlDocument",
          "returnType": {
            "name": "SimDataResource"
          },
          "description": "Creates a SimDataResource from an S4S-style XML document.",
          "arguments": [
            {
              "name": "doc",
              "description": "XML document from which to parse SimData.",
              "type": {
                "name": "XmlDocumentNode",
                "path": {
                  "pkg": "xml-dom",
                  "group": "classes",
                  "item": "XmlDocumentNode"
                }
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the document.",
              "type": {
                "name": "WritableModelFromOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelFromOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const data = SimDataResource.fromXmlDocument(doc);"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "fromXmlDocumentAsync",
          "returnType": {
            "name": "Promise<SimDataResource>"
          },
          "description": "Asynchronously creates a SimDataResource from an S4S-style XML document.",
          "arguments": [
            {
              "name": "doc",
              "description": "XML document from which to parse SimData.",
              "type": {
                "name": "XmlDocumentNode",
                "path": {
                  "pkg": "xml-dom",
                  "group": "classes",
                  "item": "XmlDocumentNode"
                }
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the document.",
              "type": {
                "name": "WritableModelFromOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelFromOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "SimDataResource.fromXmlDocumentAsync(doc).then(data => {\n  // do stuff\n});"
            }
          ]
        }
      ]
    },
    {
      "title": "Methods",
      "content": [
        {
          "displayType": "function",
          "name": "isXml",
          "returnType": {
            "name": "boolean"
          },
          "description": "Always returns false.",
          "overrides": {
            "name": "Resource",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "Resource"
            }
          }
        },
        {
          "displayType": "function",
          "name": "removeInstances",
          "description": "Removes instances from this SimData by reference equality, so the passed in instances must be the exact objects to remove.",
          "arguments": [
            {
              "name": "...instances",
              "description": "Variable number of instances to remove by reference.",
              "type": {
                "name": "SimDataInstance[]",
                "path": {
                  "pkg": "models",
                  "group": "simdata-fragments",
                  "item": "SimDataInstance"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "data.removeInstances(instance1, instance2);"
            }
          ]
        },
        {
          "displayType": "function",
          "name": "removeSchemas",
          "description": "Removes schemas from this SimData by reference equality, so the passed in instances must be the exact objects to remove.",
          "arguments": [
            {
              "name": "...schemas",
              "description": "Variable number of schemas to remove by reference.",
              "type": {
                "name": "SimDataSchema[]",
                "path": {
                  "pkg": "models",
                  "group": "simdata-fragments",
                  "item": "SimDataSchema"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "data.removeSchemas(schema1, schema2);"
            }
          ]
        },
        {
          "displayType": "function",
          "name": "toXmlDocument",
          "returnType": {
            "name": "XmlDocumentNode",
            "path": {
              "pkg": "xml-dom",
              "group": "classes",
              "item": "XmlDocumentNode"
            }
          },
          "description": "Creates an XmlDocumentNode object that represents this SimData exactly as it would appear in Sims 4 Studio. Note that schema columns are written exactly as they appear in the schema (as this order must be preserved), but nodes in instances are sorted alphabetically for readability."
        }
      ]
    }
  ]
}