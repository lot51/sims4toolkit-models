{
  "$schema": "https://raw.githubusercontent.com/sims4toolkit/misc/main/json-schemas/docs-item-schema.json",
  "header": {
    "title": {
      "prefix": "abstract class",
      "name": "MappedModel",
      "generics": [
        {
          "name": "Key"
        },
        {
          "name": "Value"
        },
        {
          "name": "Entry",
          "extends": [
            {
              "name": "MappedModelEntry<Key, Value>",
              "path": {
                "pkg": "models",
                "group": "abstracts",
                "item": "MappedModelEntry"
              }
            }
          ]
        }
      ],
      "extends": [
        {
          "name": "WritableModel",
          "path": {
            "pkg": "models",
            "group": "abstracts",
            "item": "WritableModel"
          }
        }
      ]
    },
    "description": "Base class for writable models that contain mapped data.\n\nNote that keys for entries do not necessarily have to be unique. They should be, but they do not have to be in order for the model to be structurally valid. For a constant, truly unique identifier per entry, use the ID that is generated when it is added.",
    "sourceCode": "src/lib/base/mapped-model.ts"
  },
  "sections": [
    {
      "title": "Properties",
      "content": [
        {
          "displayType": "property",
          "name": "entries",
          "prefix": "get",
          "description": "An iterable of the entries in this model. Note that mutating this iterable will not update the model, but mutating individual entries will.",
          "type": {
            "name": "Entry[]"
          }
        },
        {
          "displayType": "property",
          "name": "size",
          "prefix": "get",
          "description": "The number of entries in this model.",
          "type": {
            "name": "number"
          }
        }
      ]
    },
    {
      "title": "Methods",
      "content": [
        {
          "displayType": "function",
          "name": "add",
          "description": "Creates a new entry with the given key and value, adds it to this model, and returns it.",
          "arguments": [
            {
              "name": "key",
              "description": "Key of entry.",
              "type": {
                "name": "Key"
              }
            },
            {
              "name": "value",
              "description": "Value of entry.",
              "type": {
                "name": "Value"
              }
            }
          ],
          "returnType": {
            "name": "Entry"
          },
          "examples": [
            {
              "code": "// To ensure that values are not duplicated, consider using the following:\n\nmodel.getByValue(valueToAdd) ?? model.add(valueToAdd);"
            }
          ]
        },
        {
          "displayType": "function",
          "name": "addAll",
          "description": "Creates new entries for the given key/value pairs, adds them to this model, and returns them in an array.",
          "arguments": [
            {
              "name": "entries",
              "description": "Array of key/value pairs to add.",
              "type": {
                "name": "{ key: Key; value: Value; }[]"
              }
            }
          ],
          "returnType": {
            "name": "Entry[]"
          },
          "examples": [
            {
              "code": "// To ensure that values are not duplicated, consider using the following:\n\nmodel.addAll(entries.filter(entry => !model.hasValue(entry.value)));"
            }
          ]
        },
        {
          "displayType": "function",
          "name": "clear",
          "description": "Removes all entries from this model."
        },
        {
          "displayType": "function",
          "name": "delete",
          "description": "Removes an entry from this model by its unique ID. Returns true if something was deleted, false otherwise.",
          "arguments": [
            {
              "name": "id",
              "description": "Unique ID of entry to delete.",
              "type": {
                "name": "number"
              }
            }
          ],
          "returnType": {
            "name": "boolean"
          }
        },
        {
          "displayType": "function",
          "name": "deleteByKey",
          "description": "Removes the first entry from this model that has the given key. Returns true if something was deleted, false otherwise.",
          "arguments": [
            {
              "name": "key",
              "description": "Key of the entry to remove.",
              "type": {
                "name": "Key"
              }
            }
          ],
          "returnType": {
            "name": "boolean"
          }
        },
        {
          "displayType": "function",
          "name": "findRepeatedKeys",
          "description": "Finds all keys that belong to more than one entry and returns them in an array.",
          "returnType": {
            "name": "Key[]"
          }
        },
        {
          "displayType": "function",
          "name": "get",
          "description": "Returns the entry that has the given ID, or undefined if there isn't one.",
          "arguments": [
            {
              "name": "id",
              "description": "ID of entry to retrieve.",
              "type": {
                "name": "number"
              }
            }
          ],
          "returnType": {
            "name": "Entry"
          }
        },
        {
          "displayType": "function",
          "name": "getByKey",
          "description": "Returns the first entry that has the given key, or undefined if there aren't any.",
          "arguments": [
            {
              "name": "key",
              "description": "Key of entry to retrieve.",
              "type": {
                "name": "Key"
              }
            }
          ],
          "returnType": {
            "name": "Entry"
          }
        },
        {
          "displayType": "function",
          "name": "getByValue",
          "description": "Returns the first entry that has the given value, or undefined if there aren't any.",
          "arguments": [
            {
              "name": "value",
              "description": "Value of entry to retrieve.",
              "type": {
                "name": "Value"
              }
            }
          ],
          "returnType": {
            "name": "Entry"
          }
        },
        {
          "displayType": "function",
          "name": "getIdForKey",
          "description": "Returns the ID of the first entry that has the given key. If there are no entries with the given key, undefined is returned.",
          "arguments": [
            {
              "name": "key",
              "description": "Key to get ID for.",
              "type": {
                "name": "Key"
              }
            }
          ],
          "returnType": {
            "name": "number"
          }
        },
        {
          "displayType": "function",
          "name": "getIdsForKey",
          "description": "Returns an array of the IDs for every entry that has the given key. Ideally, the result will always have one number, however, keys are not guaranteed to be unique. If there are no entries with the given key, an empty array is returned.",
          "arguments": [
            {
              "name": "key",
              "description": "Key to get IDs for.",
              "type": {
                "name": "Key"
              }
            }
          ],
          "returnType": {
            "name": "number[]"
          }
        },
        {
          "displayType": "function",
          "name": "has",
          "description": "Checks whether this model has an entry with the given ID.",
          "arguments": [
            {
              "name": "id",
              "description": "ID to check.",
              "type": {
                "name": "number"
              }
            }
          ],
          "returnType": {
            "name": "boolean"
          }
        },
        {
          "displayType": "function",
          "name": "hasKey",
          "description": "Checks whether this model has an entry with the given key. Equality is determined by the entry's 'keyEquals()' method.",
          "arguments": [
            {
              "name": "key",
              "description": "Key to check.",
              "type": {
                "name": "Key"
              }
            }
          ],
          "returnType": {
            "name": "boolean"
          }
        },
        {
          "displayType": "function",
          "name": "hasValue",
          "description": "Checks whether this model has an entry with the given value. Equality is determined by the entry's 'valueEquals()' method.",
          "arguments": [
            {
              "name": "value",
              "description": "Value to check.",
              "type": {
                "name": "Value"
              }
            }
          ],
          "returnType": {
            "name": "boolean"
          }
        },
        {
          "displayType": "function",
          "name": "replaceEntries",
          "arguments": [
            {
              "name": "entries",
              "type": {
                "name": "Entry[]"
              },
              "description": "New entries to use."
            }
          ],
          "description": "Replaces the entries in this model with the given list. Note that new IDs will be generated for every entry."
        },
        {
          "displayType": "function",
          "name": "resetEntries",
          "description": "Resets the 'entries' property of this model, so that a new array will be created the next time it is used."
        },
        {
          "displayType": "function",
          "name": "resetKeyMap",
          "description": "Resets the key map (i.e. the object that maps entry keys to their unique IDs) of this model to guarantee that all keys are mapped to the ID of the first entry they appear in. This function should not ever have to be used, but is supplied in case the key map ever falls out of sync after editing / deleting a lot of entries. If you find yourself having to use this method, please report why."
        }
      ]
    }
  ]
}