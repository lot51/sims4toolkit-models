/**
 * Creates an array with a set number of arguments populated by a function.
 * 
 * @param length Number of items to populate the array with
 * @param fn Function that dictates what the array items should be
 * @returns Array containing values generated by the function
 */
export function makeList<T>(length: number, fn: (index: number) => T): T[] {
  const list: T[] = [];
  for (let i = 0; i < length; i++) list.push(fn(i));
  return list;
}

/**
 * Removes objects from the given array by reference equality.
 * 
 * @param toRemove Objects to remove
 * @param removeFrom Array to remove objects from
 * @returns True if at least one item was removed, else false
 */
export function removeFromArray<T>(toRemove: T[], removeFrom: T[]) {
  let anyRemoved = false;
  toRemove.forEach(obj => {
    const index = removeFrom.findIndex(o => o === obj);
    if (index < 0) return;
    removeFrom.splice(index, 1);
    anyRemoved = true;
  });
  return anyRemoved;
}

/**
 * Returns a proxy that will listen for any changes to the given object and call
 * a function when it notices one.
 * 
 * @param obj Object to get proxy for
 * @param fn Function to call when the obj is mutated
 * @returns Proxy for given obj
 */
export function getProxy<T extends object>(obj: T, fn: (target: T, property: string | symbol, value: any) => void): T {
  //@ts-ignore _isProxy is returned from the getter, TS doesn't know about it
  if (obj._isProxy) return obj;

  return new Proxy(obj, {
    set(target, property, value) {
      const ref = Reflect.set(target, property, value);
      fn(target, property, value);
      return ref;
    },
    get(target, property) {
      if (property === "_isProxy") return true;
      return Reflect.get(target, property);
    },
    deleteProperty(target, property) {
      fn(target, property, undefined);
      return Reflect.deleteProperty(target, property);
    }
  });
}
